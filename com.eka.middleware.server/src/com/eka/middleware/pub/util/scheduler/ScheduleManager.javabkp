package com.eka.middleware.pub.util.scheduler;
import org.quartz.CronScheduleBuilder;
import org.quartz.Job;
import org.quartz.JobBuilder;
import org.quartz.JobDataMap;
import org.quartz.JobDetail;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;
import org.quartz.JobKey;
import org.quartz.Scheduler;
import org.quartz.SchedulerFactory;
import org.quartz.SimpleScheduleBuilder;
import org.quartz.Trigger;
import org.quartz.TriggerBuilder;
import org.quartz.impl.StdSchedulerFactory;

import com.eka.middleware.service.DataPipeline;
import com.eka.middleware.service.RuntimePipeline;
import com.eka.middleware.service.ServiceUtils;

public class ScheduleManager {
public static void main2(String[] args) {
	try {
        // Grab the Scheduler instance from the Factory
        //Scheduler scheduler = StdSchedulerFactory.getDefaultScheduler();

		
		SchedulerFactory schedFact = new StdSchedulerFactory("D:\\ekamw\\lib\\quartz.properties");
	       Scheduler sched = schedFact.getScheduler();
	       
	       
	       JobDetail job = JobBuilder.newJob(SimpleJob.class)
	    		      .withIdentity("myJob", "group1")
	    		      .usingJobData("fqn", "packages.ekaScheduler.cronJob.api.createJobSchedule.main")
	    		      .usingJobData("myFloatValue", 3.141f)
	    		      .build();
	    		      
	    		      Trigger trigger = TriggerBuilder.newTrigger().withIdentity("myTrigger", "group1").
	    		        startNow().withSchedule(SimpleScheduleBuilder.
	    		        simpleSchedule().withIntervalInSeconds(40).repeatForever()).build();
	    			  JobKey jk=trigger.getJobKey();
	    		      
	    		      sched.scheduleJob(job, trigger);
	    		      sched.start();
        // and start it off
	       sched.start();

	       sched.shutdown();

    } catch (Exception se) {
        se.printStackTrace();
    }
}


public static void main( String[] args ) throws Exception
{
	//Quartz 1.6.3
	//JobDetail job = new JobDetail();
	//job.setName("dummyJobName");
	//job.setJobClass(HelloJob.class);    	
	JobDetail job = JobBuilder.newJob(SimpleJob.class)
	.withIdentity("dummyJobName", "group1").build();

//Quartz 1.6.3
	//CronTrigger trigger = new CronTrigger();
	//trigger.setName("dummyTriggerName");
	//trigger.setCronExpression("0/5 * * * * ?");
	
	Trigger trigger = TriggerBuilder
	.newTrigger()
	.withIdentity("dummyTriggerName", "group1")
	.withSchedule(
		CronScheduleBuilder.cronSchedule("0/5 * * * * ?"))
	.build();
	System.out.println("***********************************************************1");
	//schedule it
	Scheduler scheduler = new StdSchedulerFactory().getScheduler();
	scheduler.start();
	scheduler.scheduleJob(job, trigger);
	Thread.sleep(1000000);

}


class SimpleJob implements Job {
    public void execute(JobExecutionContext context) throws JobExecutionException {  
     /* try{
      JobDataMap dataMap = context.getJobDetail().getJobDataMap();
      String serviceFqn = dataMap.getString("fqn");
      String uuid = ServiceUtils.generateUUID("Create Job Schedule - "+serviceFqn + "" + System.nanoTime());
	  RuntimePipeline rp = RuntimePipeline.create(uuid, null, null, serviceFqn, "");
      DataPipeline dp=rp.dataPipeLine;
      dp.log("Scheduler JOB executing******************************************");
      dp.log(serviceFqn);
        }catch(Exception e){
          e.printStackTrace();
    }*/
    System.out.println("***********************************************************");
    }
}
}
